//符号表里的符号
//定义在本目标文件的全局符号，可以被其他目标文件引用。
//在本目标文件里引用的全局符号，却没有定义在本目标文件，这一般叫做外部符号，也就是符号引用。
//段名，这种符号往往由编译器产生，它的值就是该段的起始地址。
//局部符号，这类符号只在编译单元内部可见。调试器可以使用这些符号来分析程序或崩溃时的核心转储文件。这些局部符号对于链接过程没有作用，链接器往往也忽略它们。
//行号信息，即目标文件指令与源代码中代码行的对应关系，它也是可选的。
//ELF符号表结构
//ELF文件中的符号表往往是文件中的一个段，段名一般叫“.symtab”。
//有许多字段都是编译器提供的。
//符号修饰与数字签名。
//extern "C" {} c++为了与c兼容，在符号管理上，c++有一个用来声命或定义一个c的符号的"extern "C""关键字。
//__cplusplus
//弱符号与强符号
//弱引用与强引用
//对外部目标文件的符号引用在目标文件被最终链接成可执行文件时，它们须要被正确决议，如果没有找到该符号的定义，链接器就会报符号未定义错误，这种被称为强引用。
//与之相对应还有一种弱引用，在处理弱引用时，如果该符号有定义，则链接器将该符号的引用决议，如果该符号未被定义，则链接器对于该引用不报错。
//一般对于未定义的弱引用，链接器默认其为0，或者是一个特殊值，以便于程序代码能够识别。弱引用和弱符号主要用于库的链接过程。
//__attribute__((weakref))
//这种弱符号和弱引用对于库来说十分有用，比如库中定义的弱符号可以被用户定义的强符号所覆盖，从而使得程序可以使用自定义版本的库函数；或者程序可以对
//某些扩展功能模块的引用定义为弱引用，当我们将扩展模块与程序链接在一起时，功能模块就可以正常使用；如果我们去掉了某些功能模块，那么程序也可以正常链接，
//只是缺少了相应的功能，这使得程序的功能更加容易裁剪和组合。
//
